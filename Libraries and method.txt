1. Basic Utilities and System Interaction:

* os: For interacting with the operating system (files, directories, etc.)

* sys: Provides access to variables used or maintained by the interpreter.

2. Mathematics and Statistics:

* math: Provides basic mathematical functions like sqrt, sin, cos, etc.

* random: For generating random numbers and working with randomization.

* statistics: Provides functions for statistical calculations (mean, median, etc.).

3. Data Handling and File Processing:

* csv: For working with CSV files.

* json: For working with JSON data.

* pandas: A powerful library for data manipulation and analysis.

* numpy: Provides support for arrays and matrices, along with high-level mathematical operations.

4. Web Development and APIs:

* requests: For making HTTP requests to APIs and downloading data.

* flask: Lightweight web framework for building web applications.

* django: High-level web framework for larger applications.

5. Data Visualization:

* matplotlib: For creating static, interactive, and animated visualizations.

* seaborn: For creating statistical graphics.

6. Machine Learning & Artificial Intelligence:

* scikit-learn: Popular machine learning library for classification, regression, and clustering algorithms.

* tensorflow or pytorch: Deep learning libraries.

7. Date and Time:

* datetime: For working with dates and times.

* time: Provides time-related functions.

8. Concurrency and Parallelism:

* threading: For multi-threading.

* multiprocessing: For multi-processing.

9. Testing:

* unittest: Built-in module for testing Python code.

10. Regular Expressions:

* re: For working with regular expressions.

11. Graphical User Interface (GUI):

* tkinter: Standard library for creating GUIs.

12. File Compression:

* zipfile: For working with ZIP files.


Collections:

        The collections library in Python provides specialized container datatypes that extend the functionality of built-in types like lists, tuples, and dictionaries. These enhanced data structures are highly optimized for specific use cases.

Here are the key data structures available in the collections module:

1. namedtuple
A factory function for creating tuple subclasses with named fields. This allows you to access elements by name rather than by index.

python
Copy code
from collections import namedtuple

# Define a Point class with x and y attributes
Point = namedtuple('Point', ['x', 'y'])
p = Point(10, 20)

print(p.x)  # Output: 10
print(p.y)  # Output: 20

2. deque
A double-ended queue that supports appending and popping elements from both ends in O(1) time, making it more efficient than a list for queue-related operations.

python
Copy code
from collections import deque

d = deque([1, 2, 3])
d.append(4)           # Add to the right
d.appendleft(0)       # Add to the left
d.pop()               # Remove from the right
d.popleft()           # Remove from the left

print(d)  # Output: deque([1, 2, 3])

3. Counter
A dictionary subclass designed for counting hashable objects. It works as a multiset, where elements are stored as dictionary keys and their counts are stored as dictionary values.

python
Copy code
from collections import Counter

# Count the frequency of elements in a list
counter = Counter(['a', 'b', 'a', 'c', 'b', 'a'])
print(counter)  # Output: Counter({'a': 3, 'b': 2, 'c': 1})

# Access count of an element
print(counter['a'])  # Output: 3

4. defaultdict
A dictionary subclass that provides a default value for a key that doesn't exist. This avoids the need for explicit checks and key initialization.

python
Copy code
from collections import defaultdict

# Create a defaultdict with a default value of an empty list
d = defaultdict(list)
d['a'].append(1)
d['a'].append(2)
d['b'].append(4)

print(d)  # Output: defaultdict(<class 'list'>, {'a': [1, 2], 'b': [4]})

5. OrderedDict
A dictionary subclass that remembers the order in which keys were inserted. In Python 3.7+, regular dictionaries maintain insertion order by default, but OrderedDict still offers additional methods like move_to_end().

python
Copy code
from collections import OrderedDict

# Create an OrderedDict
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3

print(od)  # Output: OrderedDict([('a', 1), ('b', 2), ('c', 3)])

6. ChainMap
A class that groups multiple dictionaries into a single view. It is useful when you have multiple mappings and want to treat them as a single entity.

python
Copy code
from collections import ChainMap

# Create two dictionaries
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

# Combine them with ChainMap
combined = ChainMap(dict1, dict2)

print(combined['a'])  # Output: 1 (from dict1)
print(combined['b'])  # Output: 2 (from dict1, which takes precedence)
print(combined['c'])  # Output: 4 (from dict2)

7. UserDict, UserList, and UserString
These are wrapper classes around built-in dicts, lists, and strings. They allow you to subclass and extend the behavior of these types in a clean way, unlike subclassing the built-in types directly.

python
Copy code
from collections import UserDict

class MyDict(UserDict):
    def __setitem__(self, key, value):
        if isinstance(key, str):
            super().__setitem__(key, value)
        else:
            raise KeyError("Only strings allowed as keys")

# Using MyDict
d = MyDict()
d['name'] = 'John'   # Works fine
# d[123] = 'Invalid' # Raises KeyError





